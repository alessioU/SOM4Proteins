import os

import numpy as np
import unittest
from som4proteins.som.maps.map import Map
from som4proteins.som.maps.enums import Lattice, Shape
from som4proteins.data.dataimporter import ProteinDataImporter
from som4proteins.data.dataframe import DataFrame
from som4proteins.som.trainalgorithm import TrainAlgorithm
from som4proteins.som.parameters.parameters import TrainingParameters

class MapTest(unittest.TestCase):
    test_files_dir = os.path.join(os.environ["PROJECT_ABS_DIR"], "test", "testfiles")
    output_dir = os.path.join(os.environ["PROJECT_ABS_DIR"], "test", "output")

    def _load_file(self, filename):
        fname = os.path.join(self.test_files_dir, filename)
        return np.loadtxt(open(fname, "rb"), delimiter=",")
    
    def _remove_all_files(self):
        fileList = os.listdir(self.output_dir)
        for fileName in fileList:
            os.remove(os.path.join(self.output_dir, fileName))
         
    def setUp(self):
        self._remove_all_files()
    
    def tearDown(self):
        self._remove_all_files()
        pass
    
    def test_calculate_coordinates_rect_sheet(self):
        som_map = Map(map_size=[6, 3], weight_vector_dim=5)
        coords = np.array([[0, 0],[0, 1],[0, 2],[0, 3],[0, 4],[0, 5],[1, 0],[1, 1],[1, 2],[1, 3],[1, 4],[1, 5],[2, 0],[2, 1],[2, 2],[2, 3],[2, 4],[2, 5]])
        np.testing.assert_array_equal(som_map._calculate_coordinates([6,3], Lattice.Rect, Shape.Sheet), coords)
        
    def test_calculate_coordinates_hex_sheet(self):
        som_map = Map(map_size=[6, 3], weight_vector_dim=5)
        coords = np.array([[0, 0],[5.000000e-01, 8.660254e-01],[0, 1.732051e+00],[5.000000e-01, 2.598076e+00],[0, 3.464102e+00],[5.000000e-01, 4.330127e+00],[1, 0],[1.500000e+00, 8.660254e-01],[1, 1.732051e+00],[1.500000e+00, 2.598076e+00],[1, 3.464102e+00],[1.500000e+00, 4.330127e+00],[2, 0],[2.500000e+00, 8.660254e-01],[2, 1.732051e+00],[2.500000e+00, 2.598076e+00],[2, 3.464102e+00],[2.500000e+00, 4.330127e+00]])
        np.testing.assert_array_almost_equal(som_map._calculate_coordinates([6,3], Lattice.Hex, Shape.Sheet), coords, decimal=6)
        
    def test_calculate_coordinates_rect_cylinder(self):
        som_map = Map(map_size=[6, 3], weight_vector_dim=5)
        coords = np.array([[1, 0, 0],[1, 1, 0],[1, 2, 0],[1, 3, 0],[1, 4, 0],[1, 5, 0],[-7.071068e-01, 0, 7.071068e-01],[-7.071068e-01, 1, 7.071068e-01],[-7.071068e-01, 2, 7.071068e-01],[-7.071068e-01, 3, 7.071068e-01],[-7.071068e-01, 4, 7.071068e-01],[-7.071068e-01, 5, 7.071068e-01],[-1.836970e-16, 0, -1],[-1.836970e-16, 1, -1],[-1.836970e-16, 2, -1],[-1.836970e-16, 3, -1],[-1.836970e-16, 4, -1],[-1.836970e-16, 5, -1]])
        np.testing.assert_array_almost_equal(som_map._calculate_coordinates([6,3], Lattice.Rect, Shape.Cylinder), coords, decimal=6)

    def test_calculate_coordinates_hex_cylinder(self):
        som_map = Map(map_size=[6, 3], weight_vector_dim=5)
        coords = np.array([[1, 0, 0],[5.877853e-01, 1, 8.090170e-01],[1, 2, 0],[5.877853e-01, 3, 8.090170e-01],[1, 4, 0],[5.877853e-01, 5, 8.090170e-01],[-3.090170e-01, 0, 9.510565e-01],[-9.510565e-01, 1, 3.090170e-01],[-3.090170e-01, 2, 9.510565e-01],[-9.510565e-01, 3, 3.090170e-01],[-3.090170e-01, 4, 9.510565e-01],[-9.510565e-01, 5, 3.090170e-01],[-8.090170e-01, 0, -5.877853e-01],[-1.836970e-16, 1, -1],[-8.090170e-01, 2, -5.877853e-01],[-1.836970e-16, 3, -1],[-8.090170e-01, 4, -5.877853e-01],[-1.836970e-16, 5, -1]])
        np.testing.assert_array_almost_equal(som_map._calculate_coordinates([6,3], Lattice.Hex, Shape.Cylinder), coords, decimal=6)
    
    def test_calculate_coordinates_rect_toroid(self):
        som_map = Map(map_size=[6, 3], weight_vector_dim=5)
        coords = np.array([[1, 2, 0],[1, 9.477373e-01, 1.761191e+00],[1, -1.101794e+00, 1.669147e+00],[1, -1.991949e+00, -1.792786e-01],[1, -7.860501e-01, -1.839056e+00],[1, 1.246980e+00, -1.563663e+00],[-7.071068e-01, 2.707107e+00, 0],[-7.071068e-01, 1.282813e+00, 2.383866e+00],[-7.071068e-01, -1.491337e+00, 2.259279e+00],[-7.071068e-01, -2.696209e+00, -2.426632e-01],[-7.071068e-01, -1.063961e+00, -2.489260e+00],[-7.071068e-01, 1.687853e+00, -2.116501e+00],[-1.836970e-16, 1, 0],[-1.836970e-16, 4.738687e-01, 8.805955e-01],[-1.836970e-16, -5.508970e-01, 8.345733e-01],[-1.836970e-16, -9.959743e-01, -8.963931e-02],[-1.836970e-16, -3.930250e-01, -9.195278e-01],[-1.836970e-16, 6.234898e-01, -7.818315e-01]])
        np.testing.assert_array_almost_equal(som_map._calculate_coordinates([6,3], Lattice.Rect, Shape.Toroid), coords, decimal=6)

    def test_calculate_coordinates_hex_toroid(self):
        som_map = Map(map_size=[6, 3], weight_vector_dim=5)
        coords = np.array([[1, 2, 0],[5.877853e-01, 1.331105e+00, 2.473608e+00],[1, -1.101794e+00, 1.669147e+00],[5.877853e-01, -2.797709e+00, -2.517983e-01],[1, -7.860501e-01, -1.839056e+00],[5.877853e-01, 1.751393e+00, -2.196178e+00],[-3.090170e-01, 2.951057e+00, 0],[-9.510565e-01, 1.094171e+00, 2.033310e+00],[-3.090170e-01, -1.625728e+00, 2.462873e+00],[-9.510565e-01, -2.299722e+00, -2.069787e-01],[-3.090170e-01, -1.159839e+00, -2.713578e+00],[-9.510565e-01, 1.439649e+00, -1.805262e+00],[-8.090170e-01, 1.412215e+00, 0],[-1.836970e-16, 4.738687e-01, 8.805955e-01],[-8.090170e-01, -7.779848e-01, 1.178597e+00],[-1.836970e-16, -9.959743e-01, -8.963931e-02],[-8.090170e-01, -5.550357e-01, -1.298571e+00],[-1.836970e-16, 6.234898e-01, -7.818315e-01]])
        np.testing.assert_array_almost_equal(som_map._calculate_coordinates([6,3], Lattice.Hex, Shape.Toroid), coords, decimal=6)
        
    def test_calculate_distances_rect_sheet(self):
        som_map = Map(map_size=[4, 4], weight_vector_dim=5, lattice=Lattice.Rect, shape=Shape.Sheet)
        dists = np.array([[0, 1, 2, 3, 1, 1.414214e+00, 2.236068e+00, 3.162278e+00, 2, 2.236068e+00, 2.828427e+00, 3.605551e+00, 3, 3.162278e+00, 3.605551e+00, 4.242641e+00],[1, 0, 1, 2, 1.414214e+00, 1, 1.414214e+00, 2.236068e+00, 2.236068e+00, 2, 2.236068e+00, 2.828427e+00, 3.162278e+00, 3, 3.162278e+00, 3.605551e+00],[2, 1, 0, 1, 2.236068e+00, 1.414214e+00, 1, 1.414214e+00, 2.828427e+00, 2.236068e+00, 2, 2.236068e+00, 3.605551e+00, 3.162278e+00, 3, 3.162278e+00],[3, 2, 1, 0, 3.162278e+00, 2.236068e+00, 1.414214e+00, 1, 3.605551e+00, 2.828427e+00, 2.236068e+00, 2, 4.242641e+00, 3.605551e+00, 3.162278e+00, 3],[1, 1.414214e+00, 2.236068e+00, 3.162278e+00, 0, 1, 2, 3, 1, 1.414214e+00, 2.236068e+00, 3.162278e+00, 2, 2.236068e+00, 2.828427e+00, 3.605551e+00],[1.414214e+00, 1, 1.414214e+00, 2.236068e+00, 1, 0, 1, 2, 1.414214e+00, 1, 1.414214e+00, 2.236068e+00, 2.236068e+00, 2, 2.236068e+00, 2.828427e+00],[2.236068e+00, 1.414214e+00, 1, 1.414214e+00, 2, 1, 0, 1, 2.236068e+00, 1.414214e+00, 1, 1.414214e+00, 2.828427e+00, 2.236068e+00, 2, 2.236068e+00],[3.162278e+00, 2.236068e+00, 1.414214e+00, 1, 3, 2, 1, 0, 3.162278e+00, 2.236068e+00, 1.414214e+00, 1, 3.605551e+00, 2.828427e+00, 2.236068e+00, 2],[2, 2.236068e+00, 2.828427e+00, 3.605551e+00, 1, 1.414214e+00, 2.236068e+00, 3.162278e+00, 0, 1, 2, 3, 1, 1.414214e+00, 2.236068e+00, 3.162278e+00],[2.236068e+00, 2, 2.236068e+00, 2.828427e+00, 1.414214e+00, 1, 1.414214e+00, 2.236068e+00, 1, 0, 1, 2, 1.414214e+00, 1, 1.414214e+00, 2.236068e+00],[2.828427e+00, 2.236068e+00, 2, 2.236068e+00, 2.236068e+00, 1.414214e+00, 1, 1.414214e+00, 2, 1, 0, 1, 2.236068e+00, 1.414214e+00, 1, 1.414214e+00],[3.605551e+00, 2.828427e+00, 2.236068e+00, 2, 3.162278e+00, 2.236068e+00, 1.414214e+00, 1, 3, 2, 1, 0, 3.162278e+00, 2.236068e+00, 1.414214e+00, 1],[3, 3.162278e+00, 3.605551e+00, 4.242641e+00, 2, 2.236068e+00, 2.828427e+00, 3.605551e+00, 1, 1.414214e+00, 2.236068e+00, 3.162278e+00, 0, 1, 2, 3],[3.162278e+00, 3, 3.162278e+00, 3.605551e+00, 2.236068e+00, 2, 2.236068e+00, 2.828427e+00, 1.414214e+00, 1, 1.414214e+00, 2.236068e+00, 1, 0, 1, 2],[3.605551e+00, 3.162278e+00, 3, 3.162278e+00, 2.828427e+00, 2.236068e+00, 2, 2.236068e+00, 2.236068e+00, 1.414214e+00, 1, 1.414214e+00, 2, 1, 0, 1],[4.242641e+00, 3.605551e+00, 3.162278e+00, 3, 3.605551e+00, 2.828427e+00, 2.236068e+00, 2, 3.162278e+00, 2.236068e+00, 1.414214e+00, 1, 3, 2, 1, 0]])
        np.testing.assert_array_almost_equal(som_map.distances, dists, decimal=6)
        
    def test_calculate_distances_rect_cylinder(self):
        som_map = Map(map_size=[4, 4], weight_vector_dim=5, lattice=Lattice.Rect, shape=Shape.Cylinder)
        dists = self._load_file('test_dist_rect_cyl.csv')
        np.testing.assert_array_almost_equal(som_map.distances, dists, decimal=5)
        
    def test_calculate_distances_rect_toroid(self):
        som_map = Map(map_size=[4, 4], weight_vector_dim=5, lattice=Lattice.Rect, shape=Shape.Toroid)
        dists = self._load_file('test_dist_rect_toroid.csv')
        np.testing.assert_array_almost_equal(som_map.distances, dists, decimal=5)

    def test_calculate_distances_hex_sheet(self):
        som_map = Map(map_size=[4, 4], weight_vector_dim=5, lattice=Lattice.Hex, shape=Shape.Sheet)
        dists = np.array([[0.000000, 1.000000, 1.732051, 2.645751, 1.000000, 1.732051, 2.000000, 3.000000, 2.000000, 2.645751, 2.645751, 3.605551, 3.000000, 3.605551, 3.464102, 4.358899],[1.000000, 0.000000, 1.000000, 1.732051, 1.000000, 1.000000, 1.000000, 2.000000, 1.732051, 2.000000, 1.732051, 2.645751, 2.645751, 3.000000, 2.645751, 3.464102],[1.732051, 1.000000, 0.000000, 1.000000, 2.000000, 1.732051, 1.000000, 1.732051, 2.645751, 2.645751, 2.000000, 2.645751, 3.464102, 3.605551, 3.000000, 3.605551],[2.645751, 1.732051, 1.000000, 0.000000, 2.645751, 2.000000, 1.000000, 1.000000, 3.000000, 2.645751, 1.732051, 2.000000, 3.605551, 3.464102, 2.645751, 3.000000],[1.000000, 1.000000, 2.000000, 2.645751, 0.000000, 1.000000, 1.732051, 2.645751, 1.000000, 1.732051, 2.000000, 3.000000, 2.000000, 2.645751, 2.645751, 3.605551],[1.732051, 1.000000, 1.732051, 2.000000, 1.000000, 0.000000, 1.000000, 1.732051, 1.000000, 1.000000, 1.000000, 2.000000, 1.732051, 2.000000, 1.732051, 2.645751],[2.000000, 1.000000, 1.000000, 1.000000, 1.732051, 1.000000, 0.000000, 1.000000, 2.000000, 1.732051, 1.000000, 1.732051, 2.645751, 2.645751, 2.000000, 2.645751],[3.000000, 2.000000, 1.732051, 1.000000, 2.645751, 1.732051, 1.000000, 0.000000, 2.645751, 2.000000, 1.000000, 1.000000, 3.000000, 2.645751, 1.732051, 2.000000],[2.000000, 1.732051, 2.645751, 3.000000, 1.000000, 1.000000, 2.000000, 2.645751, 0.000000, 1.000000, 1.732051, 2.645751, 1.000000, 1.732051, 2.000000, 3.000000],[2.645751, 2.000000, 2.645751, 2.645751, 1.732051, 1.000000, 1.732051, 2.000000, 1.000000, 0.000000, 1.000000, 1.732051, 1.000000, 1.000000, 1.000000, 2.000000],[2.645751, 1.732051, 2.000000, 1.732051, 2.000000, 1.000000, 1.000000, 1.000000, 1.732051, 1.000000, 0.000000, 1.000000, 2.000000, 1.732051, 1.000000, 1.732051],[3.605551, 2.645751, 2.645751, 2.000000, 3.000000, 2.000000, 1.732051, 1.000000, 2.645751, 1.732051, 1.000000, 0.000000, 2.645751, 2.000000, 1.000000, 1.000000],[3.000000, 2.645751, 3.464102, 3.605551, 2.000000, 1.732051, 2.645751, 3.000000, 1.000000, 1.000000, 2.000000, 2.645751, 0.000000, 1.000000, 1.732051, 2.645751],[3.605551, 3.000000, 3.605551, 3.464102, 2.645751, 2.000000, 2.645751, 2.645751, 1.732051, 1.000000, 1.732051, 2.000000, 1.000000, 0.000000, 1.000000, 1.732051],[3.464102, 2.645751, 3.000000, 2.645751, 2.645751, 1.732051, 2.000000, 1.732051, 2.000000, 1.000000, 1.000000, 1.000000, 1.732051, 1.000000, 0.000000, 1.000000],[4.358899, 3.464102, 3.605551, 3.000000, 3.605551, 2.645751, 2.645751, 2.000000, 3.000000, 2.000000, 1.732051, 1.000000, 2.645751, 1.732051, 1.000000, 0.000000]])
        np.testing.assert_array_almost_equal(som_map.distances, dists, decimal=6)
        
    def test_calculate_distances_hex_cylinder(self):
        som_map = Map(map_size=[4, 4], weight_vector_dim=5, lattice=Lattice.Hex, shape=Shape.Cylinder)
        dists = np.array([[0.000000, 1.000000, 1.732051, 2.645751, 1.000000, 1.732051, 2.000000, 3.000000, 2.000000, 2.333333, 2.645751, 3.382964, 1.666667, 1.452966, 2.403701, 2.848001],[1.000000, 0.000000, 1.000000, 1.732051, 1.000000, 1.000000, 1.000000, 2.000000, 1.732051, 2.000000, 1.732051, 2.645751, 2.333333, 1.666667, 2.333333, 2.403701],[1.732051, 1.000000, 0.000000, 1.000000, 2.000000, 1.732051, 1.000000, 1.732051, 2.645751, 2.333333, 2.000000, 2.333333, 2.403701, 1.452966, 1.666667, 1.452966],[2.645751, 1.732051, 1.000000, 0.000000, 2.645751, 2.000000, 1.000000, 1.000000, 3.000000, 2.645751, 1.732051, 2.000000, 3.382964, 2.403701, 2.333333, 1.666667],[1.000000, 1.000000, 2.000000, 2.645751, 0.000000, 1.000000, 1.732051, 2.645751, 1.000000, 1.732051, 2.000000, 3.000000, 2.000000, 2.333333, 2.645751, 3.382964],[1.732051, 1.000000, 1.732051, 2.000000, 1.000000, 0.000000, 1.000000, 1.732051, 1.000000, 1.000000, 1.000000, 2.000000, 1.732051, 2.000000, 1.732051, 2.645751],[2.000000, 1.000000, 1.000000, 1.000000, 1.732051, 1.000000, 0.000000, 1.000000, 2.000000, 1.732051, 1.000000, 1.732051, 2.645751, 2.333333, 2.000000, 2.333333],[3.000000, 2.000000, 1.732051, 1.000000, 2.645751, 1.732051, 1.000000, 0.000000, 2.645751, 2.000000, 1.000000, 1.000000, 3.000000, 2.645751, 1.732051, 2.000000],[2.000000, 1.732051, 2.645751, 3.000000, 1.000000, 1.000000, 2.000000, 2.645751, 0.000000, 1.000000, 1.732051, 2.645751, 1.000000, 1.732051, 2.000000, 3.000000],[2.333333, 2.000000, 2.333333, 2.645751, 1.732051, 1.000000, 1.732051, 2.000000, 1.000000, 0.000000, 1.000000, 1.732051, 1.000000, 1.000000, 1.000000, 2.000000],[2.645751, 1.732051, 2.000000, 1.732051, 2.000000, 1.000000, 1.000000, 1.000000, 1.732051, 1.000000, 0.000000, 1.000000, 2.000000, 1.732051, 1.000000, 1.732051],[3.382964, 2.645751, 2.333333, 2.000000, 3.000000, 2.000000, 1.732051, 1.000000, 2.645751, 1.732051, 1.000000, 0.000000, 2.645751, 2.000000, 1.000000, 1.000000],[1.666667, 2.333333, 2.403701, 3.382964, 2.000000, 1.732051, 2.645751, 3.000000, 1.000000, 1.000000, 2.000000, 2.645751, 0.000000, 1.000000, 1.732051, 2.645751],[1.452966, 1.666667, 1.452966, 2.403701, 2.333333, 2.000000, 2.333333, 2.645751, 1.732051, 1.000000, 1.732051, 2.000000, 1.000000, 0.000000, 1.000000, 1.732051],[2.403701, 2.333333, 1.666667, 2.333333, 2.645751, 1.732051, 2.000000, 1.732051, 2.000000, 1.000000, 1.000000, 1.000000, 1.732051, 1.000000, 0.000000, 1.000000],[2.848001, 2.403701, 1.452966, 1.666667, 3.382964, 2.645751, 2.333333, 2.000000, 3.000000, 2.000000, 1.732051, 1.000000, 2.645751, 1.732051, 1.000000, 0.000000]])
        np.testing.assert_array_almost_equal(som_map.distances, dists, decimal=5)
        
    def test_calculate_distances_hex_toroid(self):
        som_map = Map(map_size=[4, 4], weight_vector_dim=5, lattice=Lattice.Hex, shape=Shape.Toroid)
        dists = np.array([[0.000000, 1.000000, 1.732051, 1.000000, 1.000000, 1.732051, 2.000000, 1.732051, 2.000000, 2.333333, 2.645751, 2.333333, 1.666667, 1.452966, 2.403701, 1.452966],[1.000000, 0.000000, 1.000000, 1.732051, 1.000000, 1.000000, 1.000000, 2.000000, 1.732051, 2.000000, 1.732051, 2.645751, 2.333333, 1.666667, 2.333333, 2.403701],[1.732051, 1.000000, 0.000000, 1.000000, 2.000000, 1.732051, 1.000000, 1.732051, 2.645751, 2.333333, 2.000000, 2.333333, 2.403701, 1.452966, 1.666667, 1.452966],[1.000000, 1.732051, 1.000000, 0.000000, 1.000000, 2.000000, 1.000000, 1.000000, 1.732051, 2.645751, 1.732051, 2.000000, 2.333333, 2.403701, 2.333333, 1.666667],[1.000000, 1.000000, 2.000000, 1.000000, 0.000000, 1.000000, 1.732051, 1.000000, 1.000000, 1.732051, 2.000000, 1.732051, 2.000000, 2.333333, 2.645751, 2.333333],[1.732051, 1.000000, 1.732051, 2.000000, 1.000000, 0.000000, 1.000000, 1.732051, 1.000000, 1.000000, 1.000000, 2.000000, 1.732051, 2.000000, 1.732051, 2.645751],[2.000000, 1.000000, 1.000000, 1.000000, 1.732051, 1.000000, 0.000000, 1.000000, 2.000000, 1.732051, 1.000000, 1.732051, 2.645751, 2.333333, 2.000000, 2.333333],[1.732051, 2.000000, 1.732051, 1.000000, 1.000000, 1.732051, 1.000000, 0.000000, 1.000000, 2.000000, 1.000000, 1.000000, 1.732051, 2.645751, 1.732051, 2.000000],[2.000000, 1.732051, 2.645751, 1.732051, 1.000000, 1.000000, 2.000000, 1.000000, 0.000000, 1.000000, 1.732051, 1.000000, 1.000000, 1.732051, 2.000000, 1.732051],[2.333333, 2.000000, 2.333333, 2.645751, 1.732051, 1.000000, 1.732051, 2.000000, 1.000000, 0.000000, 1.000000, 1.732051, 1.000000, 1.000000, 1.000000, 2.000000],[2.645751, 1.732051, 2.000000, 1.732051, 2.000000, 1.000000, 1.000000, 1.000000, 1.732051, 1.000000, 0.000000, 1.000000, 2.000000, 1.732051, 1.000000, 1.732051],[2.333333, 2.645751, 2.333333, 2.000000, 1.732051, 2.000000, 1.732051, 1.000000, 1.000000, 1.732051, 1.000000, 0.000000, 1.000000, 2.000000, 1.000000, 1.000000],[1.666667, 2.333333, 2.403701, 2.333333, 2.000000, 1.732051, 2.645751, 1.732051, 1.000000, 1.000000, 2.000000, 1.000000, 0.000000, 1.000000, 1.732051, 1.000000],[1.452966, 1.666667, 1.452966, 2.403701, 2.333333, 2.000000, 2.333333, 2.645751, 1.732051, 1.000000, 1.732051, 2.000000, 1.000000, 0.000000, 1.000000, 1.732051],[2.403701, 2.333333, 1.666667, 2.333333, 2.645751, 1.732051, 2.000000, 1.732051, 2.000000, 1.000000, 1.000000, 1.000000, 1.732051, 1.000000, 0.000000, 1.000000],[1.452966, 2.403701, 1.452966, 1.666667, 2.333333, 2.645751, 2.333333, 2.000000, 1.732051, 2.000000, 1.732051, 1.000000, 1.000000, 1.732051, 1.000000, 0.000000]])
        np.testing.assert_array_almost_equal(som_map.distances, dists, decimal=5)
        
    def test_lininit(self):
        fname = os.path.join(self.test_files_dir, "iris.csv")
        iris = np.loadtxt(open(fname, "rb"), delimiter=",")
        _, dim = iris.shape
        som_map = Map(map_size=[10, 10], weight_vector_dim=dim, lattice=Lattice.Hex, shape=Shape.Sheet)
        som_map.lininit(iris)
        output_val = np.array([[4.7805,2.8646,2.0901,0.5002],[4.9451,2.8271,2.4801,0.6636],[5.1097,2.7897,2.8700,0.8269],[5.2744,2.7522,3.2600,0.9903],[5.4390,2.7148,3.6499,1.1536],[5.6036,2.6773,4.0399,1.3170],[5.7682,2.6399,4.4298,1.4804],[5.9328,2.6024,4.8198,1.6437],[6.0974,2.5650,5.2097,1.8071],[6.2620,2.5275,5.5996,1.9704],[4.8521,2.9441,2.0710,0.4920],[5.0167,2.9067,2.4609,0.6554],[5.1813,2.8692,2.8509,0.8188],[5.3459,2.8318,3.2408,0.9821],[5.5105,2.7943,3.6308,1.1455],[5.6751,2.7569,4.0207,1.3088],[5.8398,2.7194,4.4106,1.4722],[6.0044,2.6820,4.8006,1.6356],[6.1690,2.6445,5.1905,1.7989],[6.3336,2.6071,5.5805,1.9623],[4.9237,3.0237,2.0518,0.4839],[5.0883,2.9862,2.4418,0.6473],[5.2529,2.9488,2.8317,0.8106],[5.4175,2.9113,3.2216,0.9740],[5.5821,2.8739,3.6116,1.1373],[5.7467,2.8364,4.0015,1.3007],[5.9113,2.7990,4.3915,1.4641],[6.0759,2.7615,4.7814,1.6274],[6.2405,2.7241,5.1714,1.7908],[6.4052,2.6866,5.5613,1.9541],[4.9952,3.1032,2.0327,0.4758],[5.1598,3.0658,2.4226,0.6391],[5.3245,3.0283,2.8125,0.8025],[5.4891,2.9909,3.2025,0.9658],[5.6537,2.9534,3.5924,1.1292],[5.8183,2.9160,3.9824,1.2926],[5.9829,2.8785,4.3723,1.4559],[6.1475,2.8411,4.7623,1.6193],[6.3121,2.8036,5.1522,1.7826],[6.4767,2.7661,5.5422,1.9460],[5.0668,3.1828,2.0135,0.4676],[5.2314,3.1453,2.4034,0.6310],[5.3960,3.1079,2.7934,0.7943],[5.5606,3.0704,3.1833,0.9577],[5.7252,3.0330,3.5733,1.1211],[5.8899,2.9955,3.9632,1.2844],[6.0545,2.9580,4.3532,1.4478],[6.2191,2.9206,4.7431,1.6111],[6.3837,2.8831,5.1331,1.7745],[6.5483,2.8457,5.5230,1.9379],[5.1384,3.2623,1.9943,0.4595],[5.3030,3.2249,2.3843,0.6228],[5.4676,3.1874,2.7742,0.7862],[5.6322,3.1500,3.1642,0.9496],[5.7968,3.1125,3.5541,1.1129],[5.9614,3.0750,3.9441,1.2763],[6.1260,3.0376,4.3340,1.4396],[6.2906,3.0001,4.7240,1.6030],[6.4553,2.9627,5.1139,1.7664],[6.6199,2.9252,5.5038,1.9297],[5.2099,3.3419,1.9752,0.4513],[5.3746,3.3044,2.3651,0.6147],[5.5392,3.2669,2.7551,0.7781],[5.7038,3.2295,3.1450,0.9414],[5.8684,3.1920,3.5350,1.1048],[6.0330,3.1546,3.9249,1.2681],[6.1976,3.1171,4.3148,1.4315],[6.3622,3.0797,4.7048,1.5949],[6.5268,3.0422,5.0947,1.7582],[6.6914,3.0048,5.4847,1.9216],[5.2815,3.4214,1.9560,0.4432],[5.4461,3.3839,2.3460,0.6065],[5.6107,3.3465,2.7359,0.7699],[5.7753,3.3090,3.1258,0.9333],[5.9399,3.2716,3.5158,1.0966],[6.1046,3.2341,3.9057,1.2600],[6.2692,3.1967,4.2957,1.4233],[6.4338,3.1592,4.6856,1.5867],[6.5984,3.1218,5.0756,1.7501],[6.7630,3.0843,5.4655,1.9134],[5.3531,3.5009,1.9369,0.4350],[5.5177,3.4635,2.3268,0.5984],[5.6823,3.4260,2.7167,0.7618],[5.8469,3.3886,3.1067,0.9251],[6.0115,3.3511,3.4966,1.0885],[6.1761,3.3137,3.8866,1.2518],[6.3407,3.2762,4.2765,1.4152],[6.5053,3.2388,4.6665,1.5786],[6.6700,3.2013,5.0564,1.7419],[6.8346,3.1639,5.4464,1.9053],[5.4246,3.5805,1.9177,0.4269],[5.5893,3.5430,2.3076,0.5903],[5.7539,3.5056,2.6976,0.7536],[5.9185,3.4681,3.0875,0.9170],[6.0831,3.4307,3.4775,1.0803],[6.2477,3.3932,3.8674,1.2437],[6.4123,3.3558,4.2574,1.4071],[6.5769,3.3183,4.6473,1.5704],[6.7415,3.2809,5.0373,1.7338],[6.9061,3.2434,5.4272,1.8971]])
        np.testing.assert_almost_equal(som_map.neurons_weights, output_val, decimal=4)
    
    def test_lininit_proteins(self):
        fname = os.path.join(self.test_files_dir, "test_lininit_proteins_val.csv")
        output_val = np.loadtxt(open(fname, "rb"), delimiter=",")
        # ahatv
        trajectory_file = os.path.join(self.test_files_dir, "trajcomb_ca_dt100_AHATV.xtc")
        structure_file = os.path.join(self.test_files_dir, "ahatv_CA_aligned.pdb")
        protein_name = "ahatv"
        p_ahatv = ProteinDataImporter(trajectory_file=trajectory_file,
                                    structure_file=structure_file,
                                    protein_name=protein_name,
                                    output_dir=self.output_dir)
        dataStruct = p_ahatv.get_coord_matrix()
        # ahavf
        trajectory_file = os.path.join(self.test_files_dir, "trajcomb_ca_dt100_AHAVF.xtc")
        structure_file = os.path.join(self.test_files_dir, "ahavf_CA_aligned.pdb")
        protein_name = "ahavf"
        p_ahavf = ProteinDataImporter(trajectory_file=trajectory_file,
                                    structure_file=structure_file,
                                    protein_name=protein_name,
                                    output_dir=self.output_dir)
        dataStruct.join(p_ahavf.get_coord_matrix())
        dim = dataStruct.n_rows
        som_map = Map(map_size=[10, 10], weight_vector_dim=dim, lattice=Lattice.Hex, shape=Shape.Sheet)
        som_map.lininit(dataStruct.data)
        np.testing.assert_almost_equal(som_map.neurons_weights, output_val, decimal=5)
        
    def test_bmus_calc(self):
        fname = os.path.join(self.test_files_dir, "iris.csv")
        iris = np.loadtxt(open(fname, "rb"), delimiter=",")
        fname = os.path.join(self.test_files_dir, "bmus_test_calc_bmus.csv")
        bmus_val = np.loadtxt(open(fname, "rb"), delimiter=",")
        fname = os.path.join(self.test_files_dir, "qerrors_test_calc_bmus.csv")
        qerrors_val = np.loadtxt(open(fname, "rb"), delimiter=",")
        dataframe = DataFrame(iris)
        dataset_len, dim = iris.shape
        dataframe = DataFrame(iris)
        msize = [10, 10]
        som_map = Map(map_size=msize, weight_vector_dim=dim, lattice=Lattice.Hex, shape=Shape.Sheet)
        som_map.lininit(iris)
        TrainAlgorithm(som_map, dataframe.data, TrainingParameters())
        bmus, qerrors = som_map.calc_bmus(iris)
        np.testing.assert_equal(bmus+1, bmus_val)
        np.testing.assert_almost_equal(qerrors, qerrors_val, decimal=4)