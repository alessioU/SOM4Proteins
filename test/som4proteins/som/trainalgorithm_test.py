import os

import unittest
import numpy as np
from som4proteins.som.parameters.parameters import TrainingParameters
from som4proteins.som.parameters.enums import PHASE, SampleOrderType
from som4proteins.som.maps.map import Map
from som4proteins.som.maps.enums import Lattice, Shape
from som4proteins.som.trainalgorithm import TrainAlgorithm
from som4proteins.data.dataframe import DataFrame

class TrainAlgorithmTest(unittest.TestCase):
    test_files_dir = os.path.join(os.environ["PROJECT_ABS_DIR"], "test", "testfiles")
    
    def test_hex_batchtrain(self):
        fname = os.path.join(self.test_files_dir, "iris.csv")
        iris = np.loadtxt(open(fname, "rb"), delimiter=",")
        fname = os.path.join(self.test_files_dir, "test_batchtrain_values.csv")
        output_val = np.loadtxt(open(fname, "rb"), delimiter=",")
        dataset_len, dim = iris.shape
        dataframe = DataFrame(iris)
        msize = [10, 10]
        som_map = Map(map_size=msize, weight_vector_dim=dim, lattice=Lattice.Hex, shape=Shape.Sheet)
        som_map.lininit(iris)
        trainingParameters = TrainingParameters()
        trainingParameters.defaultParameters(PHASE.Rough)
        bt = TrainAlgorithm(som_map, dataframe.data, trainingParameters)
        bt.runBatch()
        np.testing.assert_almost_equal(som_map.neurons_weights, output_val, decimal=4)
    
    def test_rect_batchtrain(self):
        fname = os.path.join(self.test_files_dir, "iris.csv")
        iris = np.loadtxt(open(fname, "rb"), delimiter=",")
        actual_weights = [[5.024726, 2.275376, 3.357408, 1.013233],[5.220500, 2.347010, 3.498034, 1.054177],[5.473591, 2.414842, 3.770924, 1.125277],[5.563341, 2.452308, 3.912775, 1.179771],[5.578117, 2.517666, 4.014221, 1.232651],[5.507531, 2.612836, 4.227041, 1.333080],[5.516282, 2.606396, 4.401978, 1.406178],[5.776702, 2.482424, 4.501038, 1.440159],[6.026923, 2.385047, 4.714800, 1.543061],[6.037604, 2.405838, 4.880604, 1.621844],[4.996892, 2.336135, 3.143365, 0.961799],[5.175942, 2.399034, 3.307173, 1.025093],[5.457008, 2.460671, 3.683148, 1.116313],[5.607371, 2.533864, 3.914332, 1.176389],[5.649260, 2.630469, 4.043076, 1.222765],[5.600386, 2.723482, 4.224361, 1.309136],[5.567307, 2.742720, 4.393549, 1.393997],[5.723310, 2.638375, 4.546345, 1.483238],[5.910154, 2.541985, 4.839962, 1.687299],[5.905264, 2.565037, 4.971223, 1.778809],[4.729282, 2.686093, 1.916249, 0.467051],[4.921029, 2.686004, 2.306682, 0.625708],[5.400080, 2.679088, 3.293283, 0.983277],[5.663226, 2.722264, 3.867338, 1.165438],[5.704944, 2.770651, 4.044712, 1.215671],[5.694506, 2.821118, 4.223922, 1.293233],[5.691951, 2.857551, 4.421221, 1.394544],[5.775583, 2.816891, 4.647296, 1.558958],[5.869937, 2.712489, 4.967833, 1.819643],[5.871230, 2.695860, 5.045070, 1.879852],[4.627955, 2.949698, 1.418257, 0.219915],[4.732116, 2.967725, 1.584319, 0.269657],[5.161572, 2.910877, 2.523937, 0.649397],[5.622612, 2.830696, 3.706118, 1.124781],[5.724718, 2.850405, 4.040445, 1.237577],[5.812628, 2.886570, 4.287974, 1.330876],[5.914209, 2.911938, 4.541326, 1.457122],[5.978222, 2.901932, 4.748991, 1.622268],[5.975793, 2.803488, 5.008850, 1.824056],[5.953210, 2.744456, 5.111540, 1.888874],[4.653963, 3.055990, 1.396543, 0.195967],[4.728220, 3.070876, 1.480702, 0.205827],[4.946224, 3.053916, 1.907720, 0.370430],[5.490332, 2.927944, 3.282776, 0.958879],[5.804345, 2.904922, 4.075132, 1.275231],[5.970738, 2.925658, 4.409372, 1.398836],[6.062899, 2.927360, 4.648445, 1.521583],[6.109904, 2.924596, 4.831592, 1.661042],[6.137543, 2.877449, 5.077611, 1.796981],[6.134866, 2.809267, 5.266904, 1.863731],[4.730751, 3.173161, 1.390322, 0.196705],[4.791161, 3.179451, 1.465339, 0.201516],[4.906880, 3.199340, 1.661094, 0.276176],[5.329879, 3.126140, 2.601086, 0.690891],[5.971321, 2.987431, 4.047868, 1.284376],[6.124758, 2.972849, 4.459587, 1.445070],[6.178493, 2.953732, 4.731447, 1.593969],[6.244820, 2.955045, 4.986642, 1.762631],[6.310073, 2.965628, 5.256632, 1.907531],[6.333927, 2.954755, 5.447420, 1.993652],[4.889076, 3.339843, 1.384619, 0.215681],[4.915453, 3.331601, 1.473886, 0.237385],[4.981683, 3.335713, 1.656294, 0.320237],[5.338385, 3.246582, 2.437932, 0.658771],[6.079123, 3.057882, 4.027564, 1.296210],[6.267841, 3.042258, 4.484234, 1.489980],[6.345776, 3.024142, 4.812113, 1.696186],[6.424179, 3.021079, 5.175454, 1.922790],[6.458751, 3.043275, 5.431358, 2.056230],[6.461981, 3.051399, 5.569790, 2.133765],[5.060571, 3.487848, 1.410337, 0.238956],[5.075806, 3.484167, 1.488957, 0.274413],[5.109550, 3.475138, 1.651298, 0.352068],[5.414267, 3.358597, 2.384260, 0.650637],[6.212018, 3.100202, 4.112749, 1.324729],[6.427761, 3.065501, 4.567557, 1.523801],[6.537779, 3.061200, 4.868082, 1.749577],[6.634600, 3.064180, 5.296664, 2.031028],[6.657425, 3.081012, 5.588436, 2.141532],[6.660592, 3.090443, 5.725730, 2.187778],[5.233381, 3.669045, 1.440300, 0.250415],[5.254065, 3.663090, 1.505883, 0.286629],[5.284638, 3.644604, 1.641133, 0.341760],[5.564314, 3.503303, 2.325929, 0.595997],[6.422627, 3.116330, 4.208767, 1.309569],[6.622297, 3.047730, 4.641745, 1.498455],[6.711229, 3.053678, 4.893535, 1.699469],[6.866911, 3.078047, 5.401723, 2.011743],[7.006300, 3.105135, 5.834902, 2.126893],[7.073143, 3.120193, 6.016017, 2.150832],[5.344664, 3.816947, 1.442730, 0.246919],[5.370581, 3.809362, 1.500362, 0.278457],[5.412719, 3.778062, 1.631951, 0.327593],[5.729773, 3.581671, 2.394820, 0.598128],[6.574525, 3.107502, 4.301234, 1.299091],[6.730255, 3.034457, 4.661953, 1.448700],[6.796598, 3.045170, 4.870421, 1.594821],[7.032515, 3.079440, 5.521630, 1.921520],[7.278212, 3.114491, 6.062641, 2.066402],[7.375478, 3.133814, 6.233849, 2.094472]]
        dataset_len, dim = iris.shape
        dataframe = DataFrame(iris)
        msize = [10, 10]
        som_map = Map(map_size=msize, weight_vector_dim=dim, lattice=Lattice.Rect, shape=Shape.Sheet)
        som_map.lininit(iris)
        trainingParameters = TrainingParameters()
        trainingParameters.defaultParameters(PHASE.Rough)
        bt = TrainAlgorithm(som_map, dataframe.data, trainingParameters)
        bt.runBatch()
        np.testing.assert_almost_equal(som_map.neurons_weights, actual_weights, decimal=4)
    """
    def test_hex_seqtrain(self):
        fname = os.path.join(self.test_files_dir, "iris.csv")
        iris = np.loadtxt(open(fname, "rb"), delimiter=",")
        actual_weights = [[5.024726, 2.275376, 3.357408, 1.013233],[5.220500, 2.347010, 3.498034, 1.054177],[5.473591, 2.414842, 3.770924, 1.125277],[5.563341, 2.452308, 3.912775, 1.179771],[5.578117, 2.517666, 4.014221, 1.232651],[5.507531, 2.612836, 4.227041, 1.333080],[5.516282, 2.606396, 4.401978, 1.406178],[5.776702, 2.482424, 4.501038, 1.440159],[6.026923, 2.385047, 4.714800, 1.543061],[6.037604, 2.405838, 4.880604, 1.621844],[4.996892, 2.336135, 3.143365, 0.961799],[5.175942, 2.399034, 3.307173, 1.025093],[5.457008, 2.460671, 3.683148, 1.116313],[5.607371, 2.533864, 3.914332, 1.176389],[5.649260, 2.630469, 4.043076, 1.222765],[5.600386, 2.723482, 4.224361, 1.309136],[5.567307, 2.742720, 4.393549, 1.393997],[5.723310, 2.638375, 4.546345, 1.483238],[5.910154, 2.541985, 4.839962, 1.687299],[5.905264, 2.565037, 4.971223, 1.778809],[4.729282, 2.686093, 1.916249, 0.467051],[4.921029, 2.686004, 2.306682, 0.625708],[5.400080, 2.679088, 3.293283, 0.983277],[5.663226, 2.722264, 3.867338, 1.165438],[5.704944, 2.770651, 4.044712, 1.215671],[5.694506, 2.821118, 4.223922, 1.293233],[5.691951, 2.857551, 4.421221, 1.394544],[5.775583, 2.816891, 4.647296, 1.558958],[5.869937, 2.712489, 4.967833, 1.819643],[5.871230, 2.695860, 5.045070, 1.879852],[4.627955, 2.949698, 1.418257, 0.219915],[4.732116, 2.967725, 1.584319, 0.269657],[5.161572, 2.910877, 2.523937, 0.649397],[5.622612, 2.830696, 3.706118, 1.124781],[5.724718, 2.850405, 4.040445, 1.237577],[5.812628, 2.886570, 4.287974, 1.330876],[5.914209, 2.911938, 4.541326, 1.457122],[5.978222, 2.901932, 4.748991, 1.622268],[5.975793, 2.803488, 5.008850, 1.824056],[5.953210, 2.744456, 5.111540, 1.888874],[4.653963, 3.055990, 1.396543, 0.195967],[4.728220, 3.070876, 1.480702, 0.205827],[4.946224, 3.053916, 1.907720, 0.370430],[5.490332, 2.927944, 3.282776, 0.958879],[5.804345, 2.904922, 4.075132, 1.275231],[5.970738, 2.925658, 4.409372, 1.398836],[6.062899, 2.927360, 4.648445, 1.521583],[6.109904, 2.924596, 4.831592, 1.661042],[6.137543, 2.877449, 5.077611, 1.796981],[6.134866, 2.809267, 5.266904, 1.863731],[4.730751, 3.173161, 1.390322, 0.196705],[4.791161, 3.179451, 1.465339, 0.201516],[4.906880, 3.199340, 1.661094, 0.276176],[5.329879, 3.126140, 2.601086, 0.690891],[5.971321, 2.987431, 4.047868, 1.284376],[6.124758, 2.972849, 4.459587, 1.445070],[6.178493, 2.953732, 4.731447, 1.593969],[6.244820, 2.955045, 4.986642, 1.762631],[6.310073, 2.965628, 5.256632, 1.907531],[6.333927, 2.954755, 5.447420, 1.993652],[4.889076, 3.339843, 1.384619, 0.215681],[4.915453, 3.331601, 1.473886, 0.237385],[4.981683, 3.335713, 1.656294, 0.320237],[5.338385, 3.246582, 2.437932, 0.658771],[6.079123, 3.057882, 4.027564, 1.296210],[6.267841, 3.042258, 4.484234, 1.489980],[6.345776, 3.024142, 4.812113, 1.696186],[6.424179, 3.021079, 5.175454, 1.922790],[6.458751, 3.043275, 5.431358, 2.056230],[6.461981, 3.051399, 5.569790, 2.133765],[5.060571, 3.487848, 1.410337, 0.238956],[5.075806, 3.484167, 1.488957, 0.274413],[5.109550, 3.475138, 1.651298, 0.352068],[5.414267, 3.358597, 2.384260, 0.650637],[6.212018, 3.100202, 4.112749, 1.324729],[6.427761, 3.065501, 4.567557, 1.523801],[6.537779, 3.061200, 4.868082, 1.749577],[6.634600, 3.064180, 5.296664, 2.031028],[6.657425, 3.081012, 5.588436, 2.141532],[6.660592, 3.090443, 5.725730, 2.187778],[5.233381, 3.669045, 1.440300, 0.250415],[5.254065, 3.663090, 1.505883, 0.286629],[5.284638, 3.644604, 1.641133, 0.341760],[5.564314, 3.503303, 2.325929, 0.595997],[6.422627, 3.116330, 4.208767, 1.309569],[6.622297, 3.047730, 4.641745, 1.498455],[6.711229, 3.053678, 4.893535, 1.699469],[6.866911, 3.078047, 5.401723, 2.011743],[7.006300, 3.105135, 5.834902, 2.126893],[7.073143, 3.120193, 6.016017, 2.150832],[5.344664, 3.816947, 1.442730, 0.246919],[5.370581, 3.809362, 1.500362, 0.278457],[5.412719, 3.778062, 1.631951, 0.327593],[5.729773, 3.581671, 2.394820, 0.598128],[6.574525, 3.107502, 4.301234, 1.299091],[6.730255, 3.034457, 4.661953, 1.448700],[6.796598, 3.045170, 4.870421, 1.594821],[7.032515, 3.079440, 5.521630, 1.921520],[7.278212, 3.114491, 6.062641, 2.066402],[7.375478, 3.133814, 6.233849, 2.094472]]
        dataset_len, dim = iris.shape
        dataframe = DataFrame(iris)
        msize = [10, 10]
        som_map = Map(map_size=msize, weight_vector_dim=dim, lattice=Lattice.Hex,shape=Shape.Sheet)
        som_map.lininit(iris)
        trainingParameters = TrainingParameters(sample_order_type=SampleOrderType.ORDERED, msize=msize)
        trainingParameters.defaultParameters(PHASE.Rough)
        bt = TrainAlgorithm(som_map, dataframe.data, trainingParameters)
        bt.runSequential()
        #np.testing.assert_almost_equal(som_map.neurons_weights, actual_weights, decimal=4)
        print(som_map.neurons_weights)
    """